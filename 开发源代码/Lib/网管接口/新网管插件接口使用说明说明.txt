一、函数接口：

/*初始化*/
NETMGR_API BOOL MBOX_Initialize();
/*释放*/
NETMGR_API BOOL MBOX_Dispose();
/*获取错误码*/
NETMGR_API MBOX_ERRORCODE MBOX_GetLastError();
/*登录*/
NETMGR_API MBOX_HANDLE MBOX_Login(char *sMboxIp,char* sLocalIp, char *sUserName,char * sUserPassword);
/*登出*/
NETMGR_API BOOL MBOX_Logout(MBOX_HANDLE handle);
/*检测设备在线情况*/
NETMGR_API BOOL MBOX_IsDeviceOnline(char *sMboxIP);
/*检查用户是否存在*/
NETMGR_API BOOL MBOX_IsSubscriberExist(MBOX_HANDLE handle,uint32 subNumber);
/*创建用户*/
NETMGR_API BOOL MBOX_CreateSubscriber(MBOX_HANDLE handle,SUB_BASE_INFO&);
/*批量创建用户*/
NETMGR_API int MBOX_BatchCreateSubscriber(MBOX_HANDLE handle,SUB_BASE_INFO&,uint32 subCount);
/*查询用户*/
NETMGR_API BOOL MBOX_QuerySubscriber(MBOX_HANDLE handle,uint32 subNumber,SUB_DETAILED_INFO& oService);
/*修改用户配置*/
NETMGR_API BOOL MBOX_ModifySubscriber(MBOX_HANDLE handle,uint32 subNumber,SUB_DETAILED_INFO& iService);
/*删除用户*/
NETMGR_API BOOL MBOX_DeleteSubscriber(MBOX_HANDLE handle,uint32 subNumber);
/*创建路由组*/
NETMGR_API BOOL MBOX_CreateRouteGroup(MBOX_HANDLE handle,uint32 rteGrpID,const char *rteGrpName);
/*创建路由组*/
NETMGR_API BOOL MBOX_DeleteRouteGroup(MBOX_HANDLE handle,uint32 rteGrpID,const char *rteGrpName);
/*查询路由组*/
NETMGR_API BOOL MBOX_QueryRouteGroup(MBOX_HANDLE handle,RouteGroup[],int& ioRouteGroup);
/*保存设置*/
NETMGR_API BOOL MBOX_SaveHaveDoneCfg(MBOX_HANDLE handle);
/*清除设置*/
NETMGR_API BOOL MBOX_ClearDeviceCfg(MBOX_HANDLE handle);
/*重启设备*/
NETMGR_API void MBOX_Restart(MBOX_HANDLE handle);
/*设置呼叫中心号码*/
NETMGR_API BOOL MBOX_SetDispatchCenter(MBOX_HANDLE handle,const char * callCenterNum);
/*设置SIP用户在线监测模式*/
NETMGR_API BOOL MBOX_SetSipOnlineDetectionMode(MBOX_HANDLE handle,int mode);//1: heartbeat 2:register 3: disable
/*获取用户在线监测模式*/
NETMGR_API BOOL MBOX_GetSipOnlineDetectionMode(MBOX_HANDLE handle,int& mode);
/*设置SIP用户注册时间间隔*/
NETMGR_API BOOL MBOX_SetSipRegisterCycleAndHeartBeatInterval(MBOX_HANDLE handle,int, int);
/*获取SIP用户注册时间间隔*/
NETMGR_API BOOL MBOX_GetSipRegisterCycleAndHeartBeatInterval(MBOX_HANDLE handle,int&, int&);
/*设置静态路由*/
NETMGR_API BOOL MBOX_SetStaticRouting(MBOX_HANDLE handle,STATIC_ROUTING_INFO);
/*获取静态路由*/
NETMGR_API BOOL MBOX_GetStaticRouting(MBOX_HANDLE handle,STATIC_ROUTING_INFO[],int&);
/*设置CDR触发器*/
NETMGR_API BOOL MBOX_SetCdrTrigger(MBOX_HANDLE handle,int,int);
/*获取CDR触发器状态*/
NETMGR_API BOOL MBOX_GetCdrTrigger(MBOX_HANDLE handle,int&,int&);
/*设置录音服务器状态*/
NETMGR_API BOOL MBOX_SetRecordServer(MBOX_HANDLE handle,RECORD_SERVER_CONFIGURE);
/*获取录音服务器状态*/
NETMGR_API BOOL MBOX_GetRecordServer(MBOX_HANDLE handle,RECORD_SERVER_CONFIGURE&);
/*创建路由*/
NETMGR_API BOOL MBOX_CreateRouting(MBOX_HANDLE handle,ROUTE_CONFIG);
/*删除路由*/
NETMGR_API BOOL MBOX_DeleteRouting(MBOX_HANDLE handle,ROUTE_CONFIG);
/*获取路由*/
NETMGR_API BOOL MBOX_GetRouting(MBOX_HANDLE handle,ROUTE_CONFIG[],int&);
/*创建呼叫源*/
NETMGR_API BOOL MBOX_CreateCallSource(MBOX_HANDLE handle,CALLSOURCE );
/*获取呼叫源*/
NETMGR_API BOOL MBOX_GetCallSource(MBOX_HANDLE handle,CALLSOURCE[],int &);
/*删除呼叫源*/
NETMGR_API BOOL MBOX_DeleteCallSource(MBOX_HANDLE handle,CALLSOURCE);
/*获取呼叫源*/
NETMGR_API BOOL MBOX_GetCallSource(MBOX_HANDLE handle,CALLSOURCE[],int&);
/*创建路由规则*/
NETMGR_API BOOL MBOX_CreateRoutingRule(MBOX_HANDLE handle,ROUTING_RULE);
/*删除路由规则*/
NETMGR_API BOOL MBOX_DeleteRoutingRule(MBOX_HANDLE handle,ROUTING_RULE);
/*获取路由规则*/
NETMGR_API BOOL MBOX_GetRoutingRule(MBOX_HANDLE handle,ROUTING_RULE[],int&);
/*创建呼叫源规则*/
NETMGR_API BOOL MBOX_CreateCallSourceRule(MBOX_HANDLE handle,CALLSOURCE_RULE);
/*删除呼叫源规则*/
NETMGR_API BOOL MBOX_DeleteCallSourceRule(MBOX_HANDLE handle,CALLSOURCE_RULE);
/*获取呼叫源规则*/
NETMGR_API BOOL MBOX_GetCallSourceRule(MBOX_HANDLE handle,CALLSOURCE_RULE[],int&);
/*创建Sip访问点*/
NETMGR_API BOOL MBOX_CreateSipSap(MBOX_HANDLE handle,SIP_SAP_INFO);
/*删除Sip访问点*/
NETMGR_API BOOL MBOX_DeleteSipSap(MBOX_HANDLE handle,SIP_SAP_INFO);
/*获取Sip访问点*/
NETMGR_API BOOL MBOX_GetSipSap(MBOX_HANDLE handle,SIP_SAP_INFO[],int&);
/*创建SIP中继*/
NETMGR_API BOOL MBOX_CreateSipTrunk(MBOX_HANDLE handle,SIP_TRUNK_INFO&);
/*删除SIP中继*/
NETMGR_API BOOL MBOX_DeleteSipTrunk(MBOX_HANDLE handle,SIP_TRUNK_INFO);
/*获取SIP中继*/
NETMGR_API BOOL MBOX_GetSipTrunk(MBOX_HANDLE handle,SIP_TRUNK_INFO[],int&);

举例说明：
NETMGR_API BOOL MBOX_GetSipTrunk(MBOX_HANDLE handle,SIP_TRUNK_INFO[],int&);此函数是要获取Sip中继的信息，设备设备中可能有多条sip中继，因此需要用一个
数组来保存获取的信息，第二个参数为一个SIP_TRUNK_INFO类型的数组。第三个参数是一个输入输出参数，输入时值为分配的数据的size，输出时表示设备内部返回的
被查询到的数据的数量。加入输入值小于设备中数据条目，此时函数返回失败，会在日志中打印一个容器过小的日志。


二、数据类型

//路由组信息
 typedef struct tagRouteGrp  
 {
	uint32 ID;                             //路由组ID
	char routeGroupName[MAX_NAME];         //路由组名称
 } RouteGroup;

 //静态路由信息
 typedef struct tagStaticRoutingInfo
 {
	 char szNet[MAX_IP4];                  //目标网络地址
	 char szMask[MAX_IP4];                 //子网掩码
	 char szGateWay[MAX_IP4];              //网关
 } STATIC_ROUTING_INFO;

 //录音服务器配置
 typedef struct tagRecordServerConf
 {
	 char szRecordServerIp[MAX_IP4];      //录音服务器IP
	 BOOL bSupport;                       //是否支持
	 int  status;                         //状态
 } RECORD_SERVER_CONFIGURE;

  //路由配置信息
 typedef struct tagRouteConfig
 {
	 int routeID;
	 int routeGroupID;
	 int routeType;                       //1: btw(1) 2: ogt(2) 3: ict(3) 4: reg(4) 5: pl(5) 6: esme(6) 7: ecsc-uplk(7) 8: csc-uplk(8) int routeType;
	 char routeName[MAX_ROUTE_NAME+1];
 } ROUTE_CONFIG;

 //呼叫源
 typedef struct tagCallSource
 {
	 int callSourceID;
	 int callSourceMainType;
	 int callSourceSubType;
	 int callSourceValue;
 }CALLSOURCE;

 //路由规则
 typedef struct tagRoutingRule
 {
	 int sourceRuleSelectIndex; //默认为0
	 int destRuleSelectIndex;
	 int routeGroupIndex;       //指的是路由组Index
 }ROUTING_RULE;

 //呼叫源规则
 typedef struct tagCallSourceRule
 {
	 int callSourceIndex;
	 int seviceType;                //any(1) voice(2) data(3) sms(4) slr(5)
	 int minReceiveNumLength;       //指的是路由组Index
 }CALLSOURCE_RULE;

 //Sip服务接入点信息
 typedef struct tagSipSap
 {
	 int sipSapID;
	 int sipSapPort;           //默认5060
	 int netProtocal;          //udp:1,tcp:2
 } SIP_SAP_INFO;

 //Sip中继
 typedef struct tagSipTrunk
 {
	 int trunkID;
	 int trunkInterfaceType;         //接口类型,内部(1),外部(2)，默认外部
	 int trunkRoutingID;             //路由ID
	 int trunkPriority;              //优先级,主(1),从(2)，默认主
	 int trunkSipSapID;              //SIP接入点ID
	 int trunkMaxChannel;            //最大通道(1~128)
	 int trunkPlayTone;              //是否放音,是(1),否(2),默认1
	 char peerIpAddress[MAX_IP4];    //对端IP地址
	 int  peerPort;                  //对端端口号
	 int  configureStatus;           //unconfigured(0) 2: deactive(1) 3: active(2) 4: deactivePending(3)
	 int  operationStatus;             //up(2) down(1)
	 int  heartBeatSupport;          //yes(1) no(0)
 }SIP_TRUNK_INFO;