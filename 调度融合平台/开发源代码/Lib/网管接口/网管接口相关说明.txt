关于获取信息接口的使用说明

NETMGR_API BOOL MBOX_GetRouteGroup(MBOX_HANDLE handle,char buffer[],uint32 size,uint32& ioRouteGroup)
参数1：[ 输入]设备登陆句柄
参数2：[ 输出]返回路由组信息的格式化文本
参数3：[ 输入]buffer的字节数
参数4: [ 输出]返回路由组的数量

buffer说明：
@格式化字符串："%d,%s;"，释意 "路由组ID,路由组名称"


NETMGR_API BOOL MBOX_GetRouting(MBOX_HANDLE handle,char[],uint32,int&);  //获取路由信息
buffer说明：
@格式化字符串："%d,%d,%d,%s;" ，释义 "路由ID,路由类型,路由组ID,路由名称"


NETMGR_API BOOL MBOX_GetCallSource(MBOX_HANDLE handle,char[],uint32,int&);//获取呼叫源
buffer说明：
@格式化字符串："%d,%d,%d,%s;" ，释义 "路由ID,路由类型,路由组ID,路由名称"

@格式化字符串："%d,%d,%d;"，释义"呼叫源ID,主类型,子类型"

NETMGR_API BOOL MBOX_GetRoutingRule(MBOX_HANDLE handle,char[],uint32,int&);//获取路由规则
buffer说明：
@格式化字符串："%d,%d,%d;"，释义 "源路由选择索引,目的路由选择索引,路由ID"

NETMGR_API BOOL MBOX_GetCallSourceRule(MBOX_HANDLE handle,char[],uint32,int&);//呼叫源规则
buffer说明：
@格式化字符串："%d,%d,%d;"，释义"呼叫源索引,服务类型,收号长度);

NETMGR_API BOOL MBOX_GetSipSap(MBOX_HANDLE handle,char[],uint32,int&);//获取sip访问点
buffer说明：
@格式化字符串："%d,%d,%d;",sipSapID,sipSapPort,netProtocal);，释义 "访问点ID,端口号,通信协议"

NETMGR_API BOOL MBOX_GetSipTrunk(MBOX_HANDLE handle,char[],uint32,int&);//获取sip中继
buffer说明：
@格式化字符串："%d,%d,%d,%d,%d,%d,%d,%s,%d,%d,%d;",
			   释义:"trunkID,trunkInterfaceType,trunkRoutingID,
				trunkPriority,trunkMaxChannel,trunkSipSapID,
				trunkPlayTone,peerPort,configureStatus,operationStatus)参见头文件
				
NETMGR_API BOOL MBOX_GetPriTrunk(MBOX_HANDLE handle,char[],uint32,int&);//获取PRI中继
buffer说明：
@格式化字符串："%d,%d,%d,%d,%d,%d,%d,%d,%d;"

			 释义:"trunkID,trunkRoutingID,trunkInterfaceType,
				trunkPriority,linkType,PbxType,
				configureStatus,operationStatus,linkCount"参见头文件注释
				
结构体说明

 typedef struct tagRouteGrp  
 {
	uint32 ID;                                 //路由组ID
	char routeGroupName[MAX_NAME];             //路由组名称
 } RouteGroup;

 //静态路由信息
 typedef struct tagStaticRoutingInfo
 {
	 char szNet[MAX_IP4];                      //网络地址
	 char szMask[MAX_IP4];                     //子网掩码
	 char szGateWay[MAX_IP4];                  //网关地址
 } STATIC_ROUTING_INFO;

 //录音服务器配置
 typedef struct tagRecordServerConf
 {
	 char szRecordServerIp[MAX_IP4];           //录音服务器ip
	 BOOL bSupport;                            //no(1) yes(2)
	 int  status;                              //down(1) up(2)
 } RECORD_SERVER_CONFIGURE;

  //路由配置信息
 typedef struct tagRouteConfig
 {
	 int routeID;                             //路由ID
	 int routeGroupID;                        //路由组ID
	 int routeType;                           //1: btw(1) 2: ogt(2) 3: ict(3) 4: reg(4) 5: pl(5) 6: esme(6) 7: ecsc-uplk(7) 8: csc-uplk(8) int routeType;
	 char routeName[MAX_ROUTE_NAME+1];        //路由名称
 } ROUTE_CONFIG;

 //呼叫源
 typedef struct tagCallSource
 {
	 int callSourceID;                        //呼叫源ID
	 int callSourceMainType;                  //
	 int callSourceSubType;                   //
	 int callSourceValue;
 }CALLSOURCE;

 //路由规则
 typedef struct tagRoutingRule
 {
	 int sourceRuleSelectIndex;      //源路由选择索引，（没有使用）
	 int destRuleSelectIndex;        //目的路由选择索引
	 int routeGroupIndex;            //指的是路由组Index
 }ROUTING_RULE;

 //呼叫源规则
 typedef struct tagCallSourceRule
 {
	 int callSourceIndex;
	 int seviceType;                //any(1) voice(2) data(3) sms(4) slr(5)
	 int minReceiveNumLength;       //指的是路由组Index
 }CALLSOURCE_RULE;

 //Sip服务接入点信息
 typedef struct tagSipSap
 {
	 int sipSapID;
	 int sipSapPort;                 //默认5060
	 int netProtocal;                //udp:1,tcp:2
 } SIP_SAP_INFO;

 //SIP中继
 typedef struct tagSipTrunk
 {
	 int trunkID;
	 int trunkInterfaceType;         //接口类型,内部(1),外部(2)，默认外部
	 int trunkRoutingID;             //路由ID
	 int trunkPriority;              //优先级,主(1),从(2)，默认主
	 int trunkSipSapID;              //SIP接入点ID
	 int trunkMaxChannel;            //最大通道(1~128)
	 int trunkPlayTone;              //是否放音,是(1),否(2),默认1
	 char peerIpAddress[MAX_IP4];    //对端IP地址
	 int  peerPort;                  //对端端口号
	 int  configureStatus;           //unconfigured(0) 2: deactive(1) 3: active(2) 4: deactivePending(3)
	 int  operationStatus;           //up(2) down(1)
	 int  heartBeatSupport;          //yes(1) no(0)
 }SIP_TRUNK_INFO;

 //PRI中继
 typedef struct tagPriTrunk
 {
	 int trunkID;
	 int trunkInterfaceType;         //接口类型,内部(1),外部(2)，默认外部
	 int trunkRoutingID;             //路由ID
	 int trunkPriority;              //优先级,主(1),从(2)，默认主
	 int configureStatus;            //unconfigured(0) 2: deactive(1) 3: active(2) 4: deactivePending(3)
	 int operationStatus;            //up(2) down(1)
	 int linkCount;                  //最大通道(0~255)
	 int linkType;                   //链路类型 E1(1),T1(2)
	 int PbxType;                    //交换机类型1: unknown(1) 2: avaya(2)3: nortel(3)4: alcatel(4) 5: siemens(5) 6: oulian(6)7: shenou(7) 8: utstarcom(8) 9: microxel(9),其他类型(unknown)
 }PRI_TRUNK_INFO;

 //PRI(T1)承载信道
typedef struct tagT1
{
	int priID;                      //中继号
	int machineID;                  //机身号
	int slotID;                     //槽位号
	int e1Port;                     //E1口
	int linkID;                     //链接ID，如果与对端的E1口的某条link进行通信，需要把linkID设置成和对端同样的ID
	int channelType;                //1: bothway(1)	2: outgoing(2) 3: incoming(3)
	int configureStatus;            //同上
	int operationStatus;            //同上
	int E1bundle;                   //表示第几个信道
} T1_LINK;

//信令通道信道
typedef struct tagSigLink
{
	int priID;
	int machineID;                  //机身号
	int slotID;                     //槽位号
	int e1Port;                     //E1口
	int portType;                   //q931(1) qSIG(2),默认1
	int theEnd;                     //用户侧：1，网络侧：2，默认1
	int peerProvideVoicePrompt;     //是:1,否:2,默认否
	int sendVoicePrompt;            //是:1,否:2,默认是 
	int E1bundle;                   //表示第几个信道
} SIG_LINK;

呼叫源类型

#define VAL_AsepNANCallSrcTp_internal	1L
#define VAL_AsepNANCallSrcTp_intra		2L
#define VAL_AsepNANCallSrcTp_external	3L
#define VAL_AsepNANCallSrcTp_scp		4L
#define VAL_AsepNANCallSrcTp_esme		5L
#define VAL_AsepNANCallSrcTp_any		6L


呼叫源子类型

#define VAL_AsepNANCallSrcSubTp_any		1L
#define VAL_AsepNANCallSrcSubTp_ps		2L
#define VAL_AsepNANCallSrcSubTp_ps_pub  3L
#define VAL_AsepNANCallSrcSubTp_ps_prv  4L
#define VAL_AsepNANCallSrcSubTp_fxs     5L
#define VAL_AsepNANCallSrcSubTp_sipu    6L
#define VAL_AsepNANCallSrcSubTp_fxo     7L
#define VAL_AsepNANCallSrcSubTp_pri     8L
#define VAL_AsepNANCallSrcSubTp_sipt    9L
#define VAL_AsepNANCallSrcSubTp_smsc    10L

呼叫源类型：
internal         1                              内部呼叫
intra              2                              内部中继
external        3                              外部中继
scp                 4                              会话控制消息            ( Session Control Packet)
esme             5                              外部短消息实体
any                 6                              任何类型
 

 

呼叫源子类型：
any                 1                              任何类型
ps                   2                               PHS手机
ps_pub       3                                 PHS公网手机
ps_prv        4                                 PHS私网手机
fxs           5                                     固定电话
sipu          6                                    SIP用户
fxo           7                                     模拟中继
pri            8                                     PRI中继
sipt           9                                    SIP中继
smsc        10                                  短消息中心






